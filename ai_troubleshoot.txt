MCP Integration Troubleshooting Notes
Goal

Expose a sql_query tool via MCP integration that can forward SQL queries ({ "sql": "…" }) to a local HTTP endpoint.

Attempts & Results

Initial state

Used server.tool("sql_query", { inputSchema: … }, handler).

tools/list showed empty inputSchema, real schema only under annotations.

Clients (Inspector, Claude) sent {}, causing Missing sql parameter.

Tried multiple argument formats

--arguments '{"sql":"…"}', --args-json, JSON file.

Always resulted in Missing sql parameter.

Object-form registration

Tried server.tool({ name, inputSchema }, handler).

Crashed with Tool [object Object] is already registered → unsupported in this SDK build.

Zod schema with server.tool

Tried z.object({ sql: z.string() }).

Schema still ended up in annotations.

Calls failed with Missing sql parameter.

Zod schema with server.registerTool

Tools showed title and description, but inputSchema.properties remained empty.

Calls failed with MCP error -32603: keyValidator._parse is not a function.

JSON Schema with registerTool

Explicit JSON Schema (draft-07) passed as inputSchema.

Inspector tools/list still showed empty properties.

Calls failed with keyValidator._parse is not a function.

Current Observations

Every variant tested (tool + JSON Schema, tool + Zod, registerTool + Zod, registerTool + JSON Schema) → schema not published to top-level inputSchema.

Schema always ends up in annotations, which clients ignore.

Calls fail either with:

Missing sql parameter (args not forwarded), or

keyValidator._parse is not a function (SDK trying to validate but failing).

Likely Root Cause

SDK version mismatch / bug:
The installed @modelcontextprotocol/sdk doesn’t correctly propagate inputSchema from either Zod or JSON Schema.
The validator (keyValidator._parse) error indicates an internal mismatch in how it expects schemas to be defined.

Next Steps for Debugging

Check exact SDK version:

npm ls @modelcontextprotocol/sdk


Confirm if it’s truly latest (some builds on npm may lag).

Inspect SDK source:

Look at node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js around registerTool.

Confirm what schema types it accepts (zod, plain JSON Schema, etc.).

Test minimal example:

Write a 10-line script with just registerTool("echo", { inputSchema: … }, args => args) and see if Inspector shows schema.

This isolates whether it’s a global bug vs. your file.

If SDK bug confirmed:

Either pin to a known good version, or open an issue in the MCP SDK repo.